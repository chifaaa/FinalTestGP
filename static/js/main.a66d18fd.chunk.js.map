{"version":3,"sources":["comments.js","usercard.js","userslist.js","posts.js","App.js","serviceWorker.js","index.js"],"names":["Comment","props","state","comments","params","this","match","axios","get","then","res","console","log","data","alias","filter","it","postId","id","setState","className","map","el","name","body","Component","UserCard","user","to","url","element","catch","err","UsersList","users","item","Posts","posts","userId","title","src","alt","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a66d18fd.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport axios from 'axios'\nclass Comment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { comments:[] }\n    }\n    componentDidMount() {\n        const { match: { params } } = this.props;\n        axios.get('https://jsonplaceholder.typicode.com/comments')\n\n            .then(res => {\n                console.log('resdata :', res.data)\n                const alias=res.data.filter(it => it.postId ===params.id)\n                \n        this.setState({\n          comments: alias\n        })\n        console.log('state :', this.state.comments)\n            })\n\n    }\n\n    render() { \n        return ( \n            <div className='listComment'>\n                {this.state.comments.map(el =>\n            <span className='comment'>\n\n                <h2>{el.name}</h2>\n                <h5>{el.body}</h5>\n                \n            </span>)}\n            </div>\n         );\n    }\n}\n \nexport default Comment;","import React from 'react';\nimport {Link,} from 'react-router-dom'\n\nconst UserCard = (props) => {\n    const {user = {}} = props\n\n    return (\n        <div className=\"user-card\">\n            \n            <div className=\"user-image\" />\n            \n            <Link to={`/posts/${user.id}`}><div className=\"user-name\">{user.name} </div></Link>\n        </div>\n    )\n}\n\nexport default UserCard","\nimport UserCard from './usercard.js'\nimport React, {Component} from 'react';\nimport axios from 'axios';\n\n\n\nconst url = 'https://jsonplaceholder.typicode.com/users'\n\n\n\naxios.get(url)\n    .then(res => {\n\n        for (const element of res.data) {\n          console.log(element.name);\n        }\n    })\n    .catch(err => {\n        // an error happened\n        console.log('OOPS! an error occured')\n    })\n\n\n\n\nclass UsersList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users : []\n    }\n  }\n\n  componentDidMount() {\n    axios.get(url)\n    .then(res => {\n      console.log('res :', res)\n\n        this.setState({\n          users: res.data\n        })\n    })\n    .catch(err => {\n\n        console.log('OOPS! an error occured')\n    })\n\n  }\n\n  render() {\n    return (\n\n\n\n\n\n<div className=\"users-list\">\n        {\n          this.state.users.map((item) => {\n            return (\n         <UserCard  user={item} />\n            )\n          })\n        }\n</div>\n\n\n\n)}}\n    \nexport default UsersList ","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom'\n\n\n\n\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts : []\n    }\n  }\n\n\n\n\n\n  componentDidMount() {\n    const { match: { params } } = this.props;\n    axios.get('https://jsonplaceholder.typicode.com/posts')\n    .then(res => {\n      \n       \n        console.log('resdata :', res.data)\n        const alias=res.data.filter(it => it.userId ==params.id)\n        this.setState({\n          posts: alias\n        })\n        console.log('filtered list :', this.state.posts)\n        console.log('paramsid :', params.id)\n    })\n    .catch(err => {\n        // an error happened\n        console.log('OOPS! an error occured')\n    })\n\n  }\n  \n  render() {\n\n    return (\n  \n<div className='listPost'>\n\n{this.state.posts.map(el =>\n<span className='post'>\n\n  <h1>{el.title}</h1>\n  <h4>{el.body}</h4>\n  <br/>\n  <Link to ={`/comment/${el.id}`}>  \n    <img \n      className=\"fit-picture\"\n      src='https://cdn0.iconfinder.com/data/icons/free-daily-icon-set/512/Comments-512.png'     \n      alt=\"Comments\"\n    >\n    </img> \n  </Link>\n</span>)}\n</div>\n\n\n\n\n\n\n      \n    );\n  }\n}\n\n\nexport default Posts;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Comment from './comments.js'\nimport UsersList  from './userslist'\nimport Posts from './posts.js'\nimport {BrowserRouter, Route,Switch} from 'react-router-dom'\n\n\n\n\n\n\nconst App = () =>  {\n  \n\n  \n\n  \n    return (\n      <BrowserRouter>\n      <div className=\"user-app\">\n\n        \n        <main className=\"user-app-main\">\n            \n        <Route exact path='/' component={UsersList }/>            \n        \n        <Switch>\n      \n      <Route exact path=\"/posts/:id\" component={Posts} /> \n      <Route   path='/comment/:id' component={Comment}/>\n        \n      </Switch>      \n        </main>\n      </div>\n      </BrowserRouter>\n\n      \n    );\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}